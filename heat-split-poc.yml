heat_template_version: 2015-10-15

description: |
   #### heat-split-poc.py
   #### tests concept of generating SSH key in stack
   #### then laying down private key to the master node
   #### plus any number of secondary nodes
   #### Author: Brian King
   #### version: 0.0.3a
   #### last modified: 2019-09-27


parameter_groups:

- label: Node Info
  parameters:
    - nodeName
    - nodeFlavor

- label: Network Settings
  parameters:
    - netRange
    - netName

parameters:

# begin node info

  nodeName:
    type: string
    default: raxNode00
    label: Cloud Server Name

  nodeFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Flavor Name or ID (such as 4 GB General Purpose v1)
    description: Choose flavor from list below
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud flavor

  nodeImage:
    type: string
    default: "CentOS 7 (PVHVM)"
    label: Cloud Server image
    constraints:
      - custom_constraint: glance.image

  nodeCount:
    type: number
    default: 3
    label: Number of Cluster nodes
    description: Enter a number between 2 and 10.
    constraints:
      - range: { min: 2, max: 10 }

#begin network params

  netName:
    type: string
    label: 'Cloud Network Name'
    description: Name of Cloud Network
    default: 'cloudNetwork'
    constraints:
      - allowed_pattern: '^[\w-]+$'
        description: "Network name may only have alphanumeric characters, underscores, and dashes"

  netRange:
    type: string
    label: 'Enter the first 3 octets of desired network range (such as 192.168.100). /24 network will be created'
    description: '/24 network will be created'
    default: '192.168.241'
    constraints:
      - allowed_pattern: '^(?:(?:^|\.)(?:2(?:5[0-5]|[0-4]\d)|1?\d?\d)){3}$'
        description: "please enter a valid 3 octets"

resources:

# begin stack resources

  stackSSHKey:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

  stackPrivateKey:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - content: { get_attr: [stackSSHKey, private_key] }
          owner: root:root
          path: /root/.ssh/id_rsa
          permissions:
            '0600'
  nodePass:
      type: OS::Heat::RandomString

# begin network resources

  cloudNet:
    type: OS::Neutron::Net
    properties:
      name: { get_param: [netName] }

  cloudNetSubnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }
      ip_version: 4
      cidr: { list_join: ['.',  [ { get_param: netRange }, '0/24' ]] }
      allocation_pools: [{'end': { list_join: ['.',  [ { get_param: netRange }, '254' ]] }, 'start': { list_join: ['.',  [ { get_param: netRange }, '12' ]] } }]


  cloudNetPorts:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: nodeCount }
      resource_def:
            type: OS::Neutron::Port
            properties:
            fixed_ips:
              str_replace:
                template: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address':  { list_join: ['.',  [ { get_param: netRange }, $num ]] } }]
                params:
                  $num: '%index%'
            name:
              str_replace:
                template: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address':  { list_join: ['.',  [ { get_param: netRange }, $num ]] } }]
                params:
                  $num: '%index%'
            network: { get_attr: [cloudNet, name] }


# begin node resources

  masterNodeConfig:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      # - config: {get_resource: cmd_init}
      - config: {get_resource: stackPrivateKey}

  masterNode:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $node01
          params:
              $node: { get_param: nodeName }
      image: { get_param: nodeImage }
      admin_pass: { get_attr: [ nodePass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: nodeFlavor }
      config_drive: True
      user_data: { get_resource: masterNodeConfig }
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

outputs:

  serverPassDisplay:
    value: { get_attr: [ nodePass, value ] }
    description: 'Admin Password of Master'

  masterPublicIPs:
     value: { get_attr: [masterNode, networks, public] }
     description: 'Public IPs of Master'

  stackPrivateSSHKey:
    value: { get_attr: ['stackSSHKey', 'private_key'] }
    description: 'private Key for accessing Master'
