heat_template_version: 2015-10-15

description: |
   #### heat-split-poc.py
   #### tests concept of generating SSH key in stack
   #### then laying down private key to the master node
   #### plus any number of secondary nodes
   #### Author: Brian King
   #### version: 0.0.3a
   #### last modified: 2019-09-27


parameter_groups:

- label: node info
  parameters:
    - nodeName
    - nodeFlavor

parameters:

# begin node info

  nodeName:
    type: string
    default: raxNode00
    label: Cloud Server Name

  nodeFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Flavor Name or ID (such as 4 GB General Purpose v1)
    description: Choose flavor from list below
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud flavor

  nodeImage:
    type: string
    default: "CentOS 7 (PVHVM)"
    label: Cloud Server image
    constraints:
      - custom_constraint: glance.image


resources:

  stackSSHKey:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

# begin stack resources

  stackPrivateKey:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - content: { get_attr: [stackSSHKey, private_key] }
          owner: root:root
          path: /root/.ssh/id_rsa
          permissions:
            '0600'

  nodePass:
      type: OS::Heat::RandomString

  masterNodeConfig:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      # - config: {get_resource: cmd_init}
      - config: {get_resource: stackPrivateKey}

  masterNode:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $node01
          params:
              $node: { get_param: nodeName }
      image: { get_param: nodeImage }
      admin_pass: { get_attr: [ nodePass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: nodeFlavor }
      config_drive: True
      user_data: { get_resource: masterNodeConfig }
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

outputs:

  serverPassDisplay:
    value: { get_attr: [ nodePass, value ] }
    description: 'Admin Password of Master'

  masterPublicIPs:
     value: { get_attr: [masterNode, networks, public] }
     description: 'Public IPs of Master'

  stackPrivateSSHKey:
    value: { get_attr: ['stackSSHKey', 'private_key'] }
    description: 'private Key for accessing Master'
